# -*- coding: utf-8 -*-
"""BasketballPredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9Fd8Cc25o6zMaRk-bXj7tU5TUvPhK66
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import xgboost as xgb

from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_ratings.html")
df_2025 = df[0]
df_2025.to_csv("df_2025.csv")
df_2025 = pd.read_csv("df_2025.csv")
df_2025.columns = df_2025.iloc[0]
df_2025 = df_2025[1:]
del df_2025[df_2025.columns[0]]
df_2025.reset_index(drop=True, inplace=True)
df_2025 = df_2025.drop(columns = ['Conf', 'Div', 'MOV', 'ORtg', 'DRtg', 'NRtg'])
df_2025

df = pd.read_html("https://www.nbastuffer.com/2024-2025-nba-team-stats/")
df_advStats = df[0]
df_advStats.to_csv("df_advStats.csv")
df_ad = pd.read_csv("df_advStats.csv")
df_advStats = df_advStats.drop(columns = ['STRK', 'CONF', 'DIVISION', 'GP', 'RANK', 'W', 'L'])
df_2025['Team'] = df_2025['Team'].astype(str)
# Adds the team names to the Table
team = df_2025['Team'].sort_values().reset_index(drop=True)
df_advStats['TEAM'] = team
df_advStats

df_temp = df_advStats.copy()
df_temp = df_temp.drop(columns = ['TEAM'])
df_temp

scaler = MinMaxScaler(feature_range=(-1, 1))
df_temp = scaler.fit_transform(df_temp)
df_temp = pd.DataFrame(df_temp)
df_temp.columns = ['PPG', 'oPPG', 'pDIFF', 'PACE', 'oEFF', 'dEFF', 'eDIFF', 'SoS', 'rSOS', 'SAR', 'CONS', 'A4F', 'WIN%', 'eWIN%', 'pWIN%', 'ACH']
df_advStats['PPG'] = df_temp['PPG']
df_advStats['oPPG'] = df_temp['oPPG']
df_advStats['pDIFF'] = df_temp['pDIFF']
df_advStats['PACE'] = df_temp['PACE']
df_advStats['oEFF'] = df_temp['oEFF']
df_advStats['dEFF'] = df_temp['dEFF']
df_advStats['eDIFF'] = df_temp['eDIFF']
df_advStats['SoS'] = df_temp['SoS']
df_advStats['rSOS'] = df_temp['rSOS']
df_advStats['SAR'] = df_temp['SAR']
df_advStats['CONS'] = df_temp['CONS']
df_advStats['A4F'] = df_temp['A4F']
df_advStats['WIN%'] = df_temp['WIN%']
df_advStats['eWIN%'] = df_temp['eWIN%']
df_advStats['pWIN%'] = df_temp['pWIN%']
df_advStats['ACH'] = df_temp['ACH']
df_advStats

print(df_2025.dtypes)
df_2025_adj = df_2025[['MOV/A', 'ORtg/A', 'DRtg/A', 'NRtg/A']].copy()
df_2025_adj

scaler = MinMaxScaler(feature_range=(-1, 1))
df_2025_adj = scaler.fit_transform(df_2025_adj)
df_2025_adj = pd.DataFrame(df_2025_adj)
df_2025_adj.columns = ['MOV/A', 'ORtg/A', 'DRtg/A', 'NRtg/A']
df_2025['MOV/A'] = df_2025_adj['MOV/A']
df_2025['ORtg/A'] = df_2025_adj['ORtg/A']
df_2025['DRtg/A'] = df_2025_adj['DRtg/A']
df_2025['NRtg/A'] = df_2025_adj['NRtg/A']
df_2025 = df_2025.drop(columns = ['W', 'L', 'Rk'])
df_2025['W/L%'] = df_2025['W/L%'].astype(float)
df_2025.dtypes

df_2025.dtypes
df_numeric = df_2025.drop(columns=["Team"])
df_numeric['W/L%'] = df_numeric['W/L%'].astype(float)
df_numeric

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-october.html")
df_schedule_Oct = df[0]
df_schedule_Oct.to_csv("df_schedule_Oct.csv")
df_schedule_Oct = pd.read_csv("df_schedule_Oct.csv")
df_schedule_Oct.reset_index(drop=True, inplace=True)
df_schedule_Oct = df_schedule_Oct.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Oct['Winner'] = (df_schedule_Oct['PTS'] > df_schedule_Oct['PTS.1']).astype(int) # 0: Home, 1: Visitor
df_schedule_Oct

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-november.html")
df_schedule_Nov = df[0]
df_schedule_Nov.to_csv("df_schedule_Nov.csv")
df_schedule_Nov = pd.read_csv("df_schedule_Nov.csv")
df_schedule_Nov.reset_index(drop=True, inplace=True)
df_schedule_Nov = df_schedule_Nov.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Nov['Winner'] = (df_schedule_Nov['PTS'] > df_schedule_Nov['PTS.1']).astype(int)
df_schedule_Nov

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-december.html")
df_schedule_Dec = df[0]
df_schedule_Dec.to_csv("df_schedule_Dec.csv")
df_schedule_Dec = pd.read_csv("df_schedule_Dec.csv")
df_schedule_Dec.reset_index(drop=True, inplace=True)
df_schedule_Dec = df_schedule_Dec.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Dec['Winner'] = (df_schedule_Dec['PTS'] > df_schedule_Dec['PTS.1']).astype(int)
df_schedule_Dec

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-january.html")
df_schedule_Jan = df[0]
df_schedule_Jan.to_csv("df_schedule_Jan.csv")
df_schedule_Jan = pd.read_csv("df_schedule_Jan.csv")
df_schedule_Jan.reset_index(drop=True, inplace=True)
df_schedule_Jan = df_schedule_Jan.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Jan['Winner'] = (df_schedule_Jan['PTS'] > df_schedule_Jan['PTS.1']).astype(int)
df_schedule_Jan = df_schedule_Jan.drop(columns = ['PTS', 'PTS.1'])
df_schedule_Jan

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-february.html")
df_schedule_Feb = df[0]
df_schedule_Feb.to_csv("df_schedule_Feb.csv")
df_schedule_Feb = pd.read_csv("df_schedule_Feb.csv")
df_schedule_Feb.reset_index(drop=True, inplace=True)
df_schedule_Feb = df_schedule_Feb.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_FebNA = df_schedule_Feb[df_schedule_Feb["PTS"].isna()]
df_schedule_FebPast = df_schedule_Feb[df_schedule_Feb["PTS"].notna()]
df_schedule_FebPast['Winner'] = (df_schedule_FebPast['PTS'] > df_schedule_FebPast['PTS.1']).astype(int)
df_schedule_FebPast

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-march.html")
df_schedule_Mar = df[0]
df_schedule_Mar.to_csv("df_schedule_Mar.csv")
df_schedule_Mar = pd.read_csv("df_schedule_Mar.csv")
df_schedule_Mar.reset_index(drop=True, inplace=True)
df_schedule_Mar = df_schedule_Mar.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Mar

df = pd.read_html("https://www.basketball-reference.com/leagues/NBA_2025_games-april.html")
df_schedule_Apr = df[0]
df_schedule_Apr.to_csv("df_schedule_Apr.csv")
df_schedule_Apr = pd.read_csv("df_schedule_Apr.csv")
df_schedule_Apr.reset_index(drop=True, inplace=True)
df_schedule_Apr = df_schedule_Apr.drop(columns = ['Unnamed: 0', 'Start (ET)', 'Unnamed: 6', 'Unnamed: 7', 'Attend.', 'LOG', 'Arena', 'Notes'])
df_schedule_Apr

"""# Combining Past Matches Together"""

past_matches = pd.concat([df_schedule_Oct, df_schedule_Nov, df_schedule_Dec, df_schedule_Jan, df_schedule_FebPast])

merged = past_matches.merge(df_advStats, how="left", left_on="Visitor/Neutral", right_on="TEAM")
merged = merged.merge(df_advStats, how="left", left_on="Home/Neutral", right_on="TEAM")
merged = merged.drop(columns = ['TEAM_x', 'TEAM_y', 'PTS', 'PTS.1'])

merged

"""# Combining Future Matches Together"""

future_matches = pd.concat([df_schedule_FebNA, df_schedule_Mar, df_schedule_Apr])
future = future_matches.merge(df_advStats, how="left", left_on="Visitor/Neutral", right_on="TEAM")
future = future.merge(df_advStats, how="left", left_on="Home/Neutral", right_on="TEAM")
future = future.drop(columns = ['TEAM_x', 'TEAM_y', 'PTS', 'PTS.1'])
future

"""# **ADVANCED STATS MODELS**

# XGBoost with Advanced Stats
"""

'''
param_grid = {
    'n_estimators': [50, 100, 200],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 5, 7],
    'subsample': [0.7, 0.8, 0.9]
}

grid_search = GridSearchCV(XGBClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)
'''

X = merged.drop(columns=['Winner', 'Visitor/Neutral', 'Home/Neutral', 'Date'])  # Features
y = merged['Winner']  # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

xgb_model = XGBClassifier(
    n_estimators=50,   # Number of trees
    learning_rate=0.01,  # Step size shrinkage (how much each tree contributes)
    max_depth=3,        # Depth of each tree (controls overfitting)
    subsample=0.7,      # Randomly sample 80% of data (prevents overfitting)
    colsample_bytree=0.8,  # Select 80% of features for each tree
    random_state=42
)

# Train the model
xgb_model.fit(X_train, y_train)
y_pred = xgb_model.predict(X_test)

# Compute accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"XGBoost Model Accuracy: {accuracy:.4f}")
print(classification_report(y_test, y_pred))

xgb_importance = xgb_model.feature_importances_
feature_names = X.columns
sorted_indices = np.argsort(xgb_importance)[::-1]

# Plot feature importance
plt.figure(figsize=(10, 5))
plt.bar(range(len(xgb_importance)), xgb_importance[sorted_indices], align="center")
plt.xticks(range(len(xgb_importance)), np.array(feature_names)[sorted_indices], rotation=45, ha="right")
plt.ylabel("Feature")
plt.title("Feature Importance in XGBoost")
plt.show()
# Print top features
num_features = min(len(xgb_importance), len(feature_names))
for i in sorted_indices[:num_features]:  # Show top 10 features
    print(f"{feature_names[i]}: {xgb_importance[i]:.4f}")

X_future = future.drop(columns=["Visitor/Neutral", "Home/Neutral", "Date"], errors="ignore")

# Ensure feature names match the training data
X_future = X_future[X_train.columns]

# Predict winners
future["Predicted_Winner"] = xgb_model.predict(X_future)
future = future[["Predicted_Winner"] + [col for col in future.columns if col != "Predicted_Winner"]]
# Show Predictions
# 0: Home, 1: Visitor
future

final_df = pd.DataFrame()
final_df['Date'] = future['Date']
final_df['Visitor/Neutral'] = future['Visitor/Neutral']
final_df['Home/Neutral'] = future['Home/Neutral']
final_df['XGBoost_ADV'] = future['Predicted_Winner']

"""# SVM With Advanced Stats"""

features = ['PPG_x', 'oPPG_x', 'pDIFF_x', 'PACE_x', 'oEFF_x', 'dEFF_x', 'eDIFF_x', 'SoS_x', 'rSOS_x', 'SAR_x', 'CONS_x', 'A4F_x', 'WIN%_x', 'eWIN%_x', 'pWIN%_x', 'ACH_x',
            'PPG_y', 'oPPG_y', 'pDIFF_y', 'PACE_y', 'oEFF_y', 'dEFF_y', 'eDIFF_y', 'SoS_y', 'rSOS_y', 'SAR_y', 'CONS_y', 'A4F_y', 'WIN%_y', 'eWIN%_y', 'pWIN%_y', 'ACH_y']

X = merged[features]
y = merged['Winner']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Train the SVM Model
model = SVC(kernel='rbf')
model.fit(X_train_scaled, y_train)

# Step 4: Make Predictions
predictions = model.predict(X_test_scaled)

# Step 5: Evaluate the Model
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy:.4f}')
print(classification_report(y_test, predictions))

X_future = future[features]  # Extract only relevant columns

# Standardize using the same scaler
X_future_scaled = scaler.transform(X_future)

# Make Predictions
future['Predicted_Winner'] = model.predict(X_future_scaled)
future # 0: Home, 1: Visitor

final_df['SVM_ADV'] = future['Predicted_Winner']

"""# **BASIC STAT MODELS**"""

past_matches = pd.concat([df_schedule_Oct, df_schedule_Nov, df_schedule_Dec, df_schedule_Jan, df_schedule_FebPast])

merged = past_matches.merge(df_2025, how="left", left_on="Visitor/Neutral", right_on="Team")
# Change old names to either Visitor of Home
merged = merged.rename(columns={
        "MOV/A": "VMOV/A",
        "ORtg/A": "VORtg/A",
        "DRtg/A": "VDRtg/A",
        "NRtg/A": "VNRtg/A",
        "W/L%": "VW/L%"
    })

merged = merged.merge(df_2025, how="left", left_on="Home/Neutral", right_on="Team")
merged = merged.rename(columns={
        "MOV/A": "HMOV/A",
        "ORtg/A": "HORtg/A",
        "DRtg/A": "HDRtg/A",
        "NRtg/A": "HNRtg/A",
        "W/L%": "HW/L%"
    })

merged = merged.drop(columns = ['Team_x', 'Team_y', 'PTS', 'PTS.1'])
merged

future_matches = pd.concat([df_schedule_FebNA, df_schedule_Mar, df_schedule_Apr])
future = future_matches.merge(df_2025, how="left", left_on="Visitor/Neutral", right_on="Team")

# Change old names to either Visitor or Home
future = future.rename(columns={
        "MOV/A": "VMOV/A",
        "ORtg/A": "VORtg/A",
        "DRtg/A": "VDRtg/A",
        "NRtg/A": "VNRtg/A",
        "W/L%": "VW/L%"
    })

future = future.merge(df_2025, how="left", left_on="Home/Neutral", right_on="Team")
future = future.rename(columns={
        "MOV/A": "HMOV/A",
        "ORtg/A": "HORtg/A",
        "DRtg/A": "HDRtg/A",
        "NRtg/A": "HNRtg/A",
        "W/L%": "HW/L%"
    })

future = future.drop(columns = ['Team_x', 'Team_y', 'PTS', 'PTS.1'])
future

"""# XGBoost with Basic Stats"""

'''
param_grid = {
    'n_estimators': [50, 100, 200],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 5, 7],
    'subsample': [0.7, 0.8, 0.9]
}

grid_search = GridSearchCV(XGBClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)
'''

X = merged.drop(columns=['Winner', 'Visitor/Neutral', 'Home/Neutral', 'Date'])  # Features
y = merged['Winner']  # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

xgb_model = XGBClassifier(
    n_estimators=200,   # Number of trees
    learning_rate=0.01,  # Step size shrinkage (how much each tree contributes)
    max_depth=3,        # Depth of each tree (controls overfitting)
    subsample=0.7,      # Randomly sample 80% of data (prevents overfitting)
    colsample_bytree=0.8,  # Select 80% of features for each tree
    random_state=42
)
xgb_model.fit(X_train, y_train)
y_pred = xgb_model.predict(X_test)

# Compute accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"XGBoost Model Accuracy: {accuracy:.4f}")
print(classification_report(y_test, y_pred))

xgb_importance = xgb_model.feature_importances_
feature_names = X.columns
sorted_indices = np.argsort(xgb_importance)[::-1]

# Plot feature importance
plt.figure(figsize=(10, 5))
plt.bar(range(len(xgb_importance)), xgb_importance[sorted_indices], align="center")
plt.xticks(range(len(xgb_importance)), np.array(feature_names)[sorted_indices], rotation=45, ha="right")
plt.ylabel("Feature")
plt.title("Feature Importance in XGBoost")
plt.show()

# Print top features
num_features = min(len(xgb_importance), len(feature_names))
for i in sorted_indices[:10]:  # Show top 10 features
    print(f"{feature_names[i]}: {xgb_importance[i]:.4f}")

XGBoost_BAS_future = future.copy()
X_future = XGBoost_BAS_future.drop(columns=["Visitor/Neutral", "Home/Neutral", "Date"], errors="ignore")

# Ensure feature names match the training data
X_future = X_future[X_train.columns]

# Predict winners
XGBoost_BAS_future["Predicted_Winner"] = xgb_model.predict(X_future)
XGBoost_BAS_future = XGBoost_BAS_future[["Predicted_Winner"] + [col for col in XGBoost_BAS_future.columns if col != "Predicted_Winner"]]
# Show Predictions
# 0: Home, 1: Visitor
XGBoost_BAS_future

final_df['XGBoost_BAS'] = XGBoost_BAS_future['Predicted_Winner']

"""# SVM with Basic Stats"""

features = ['VMOV/A', 'VORtg/A', 'VDRtg/A', 'VNRtg/A',
            'HMOV/A', 'HORtg/A', 'HDRtg/A', 'HNRtg/A']
X = merged[features]
y = merged['Winner']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Train the SVM Model
model = SVC(kernel='rbf')
model.fit(X_train_scaled, y_train)

# Step 4: Make Predictions
predictions = model.predict(X_test_scaled)

# Step 5: Evaluate the Model
accuracy = accuracy_score(y_test, predictions)
print(f'Accuracy: {accuracy:.4f}')
print(classification_report(y_test, predictions))

SVM_BAS_future = future.copy()
X_future = SVM_BAS_future[features]  # Extract only relevant columns

# Standardize using the same scaler
X_future_scaled = scaler.transform(X_future)

# Make Predictions

SVM_BAS_future['Predicted_Winner'] = model.predict(X_future_scaled)
SVM_BAS_future = SVM_BAS_future[["Predicted_Winner"] + [col for col in SVM_BAS_future.columns if col != "Predicted_Winner"]]
SVM_BAS_future # 0: Home, 1: Visitor

final_df['SVM_BAS'] = SVM_BAS_future['Predicted_Winner']

final_df
# 0: Home
# 1: Visitor